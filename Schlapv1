-- Load OrionLib
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/ionlyusegithubformcmods/1-Line-Scripts/main/Mobile%20Friendly%20Orion')))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local Workspace = game:GetService("Workspace")

-- Variables
local WalkSpeedValue, JumpPowerValue = 16, 50
local SpeedEnabled = false
local AutoSlapEnabled = false
local AutoSlapAuraEnabled = false
local SpinBotEnabled = false
local AntiVoidEnabled = false
local AntiRagdollEnabled = false
local PlayersESPEnabled = false
local UsersESPEnabled = false
local AntiVoidPart = nil
local SlapSpeed = 0.3 -- Delay between slap attempts
local LastSlapTime = 0 -- Debounce for slap activation
local LastTeleportTime = 0 -- Debounce for AntiVoid teleport
local TeleportDebounce = 1 -- Seconds between teleports
local AuraTargetIndex = 1 -- Current target index for aura
local LastAuraTime = 0 -- Debounce for aura switching
local AuraSwitchDelay = 2 -- Seconds before switching targets
local LastToolWarningTime = 0 -- Debounce for tool warning notifications
local ToolWarningCooldown = 5 -- Seconds between tool warnings
local ESPConnections = {} -- Store ESP connections for cleanup

-- Schlap Tools (Correct tool names for Schlap game)
local SchlapTools = {
    "Basic",
    "Charged", 
    "Medic",
    "Toxic",
    "Jester",
    "Dracula",
    "Stone",
    "Gravity",
    "Gatling",
    "Velocity",
    "Lava",
    "Tsunami",
    "Godly",
    "Midas"
}

-- Create Window with OrionLib
local Window = OrionLib:MakeWindow({
    Name = "Schlap | Merqury Hub",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "SchlapConfig",
    IntroText = "Schlap"
})

-- === MAIN TAB ===
local mainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Auto Slap
mainTab:AddToggle({
    Name = "Auto Slap",
    Default = false,
    Callback = function(state)
        AutoSlapEnabled = state
        if state then
            OrionLib:MakeNotification({
                Name = "Auto Slap",
                Content = "Auto Slap enabled (supports all Schlap tools)",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        else
            OrionLib:MakeNotification({
                Name = "Auto Slap",
                Content = "Auto Slap disabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Auto Slap Aura (Not Recommended)
mainTab:AddToggle({
    Name = "Auto Slap Aura (Not Recommended)",
    Default = false,
    Callback = function(state)
        AutoSlapAuraEnabled = state
        if state then
            AuraTargetIndex = 1
            OrionLib:MakeNotification({
                Name = "Auto Slap Aura",
                Content = "⚠️ AURA ENABLED - Will teleport to players and slap them!",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        else
            OrionLib:MakeNotification({
                Name = "Auto Slap Aura",
                Content = "Auto Slap Aura disabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- AntiVoid Toggle
mainTab:AddToggle({
    Name = "Antivoid",
    Default = false,
    Callback = function(state)
        AntiVoidEnabled = state
        if state then
            -- Create AntiVoid Part
            if not AntiVoidPart then
                AntiVoidPart = Instance.new("Part")
                AntiVoidPart.Size = Vector3.new(5000, 1, 5000)
                AntiVoidPart.Position = Vector3.new(0, -200, 0)
                AntiVoidPart.Anchored = true
                AntiVoidPart.Transparency = 1
                AntiVoidPart.CanCollide = true
                AntiVoidPart.Parent = Workspace
                -- Touch event to teleport player
                AntiVoidPart.Touched:Connect(function(hit)
                    local player = Players:GetPlayerFromCharacter(hit.Parent)
                    if player and player == LocalPlayer then
                        local char = player.Character
                        if char and char:FindFirstChild("HumanoidRootPart") then
                            local currentTime = tick()
                            if currentTime - LastTeleportTime >= TeleportDebounce then
                                LastTeleportTime = currentTime
                                char.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-21.19, -49.709, 331.93), Vector3.new(0, 0, 0))
                                OrionLib:MakeNotification({
                                    Name = "AntiVoid",
                                    Content = "Teleported to safe position!",
                                    Image = "rbxassetid://4483345998",
                                    Time = 3
                                })
                            end
                        end
                    end
                end)
                OrionLib:MakeNotification({
                    Name = "AntiVoid",
                    Content = "AntiVoid enabled",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end
        else
            -- Remove AntiVoid Part
            if AntiVoidPart then
                AntiVoidPart:Destroy()
                AntiVoidPart = nil
                OrionLib:MakeNotification({
                    Name = "AntiVoid",
                    Content = "AntiVoid disabled",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end
        end
    end
})

-- AntiRagdoll Toggle
mainTab:AddToggle({
    Name = "AntiRagdoll",
    Default = false,
    Callback = function(state)
        AntiRagdollEnabled = state
        if state then
            OrionLib:MakeNotification({
                Name = "AntiRagdoll",
                Content = "AntiRagdoll enabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        else
            OrionLib:MakeNotification({
                Name = "AntiRagdoll",
                Content = "AntiRagdoll disabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- === VISUAL TAB ===
local visualTab = Window:MakeTab({
    Name = "Visual",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- ESP Functions
local function createPlayerESP(player)
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
    
    local espBox = Instance.new("BoxHandleAdornment")
    espBox.Name = "PlayerESP_" .. player.Name
    espBox.Size = Vector3.new(4, 6, 1)
    espBox.Color3 = Color3.fromRGB(0, 162, 255) -- Blue
    espBox.Transparency = 0.7
    espBox.AlwaysOnTop = true
    espBox.ZIndex = 1
    espBox.Adornee = player.Character.HumanoidRootPart
    espBox.Parent = player.Character.HumanoidRootPart
    
    -- Store connection for cleanup
    if not ESPConnections[player.Name] then
        ESPConnections[player.Name] = {}
    end
    ESPConnections[player.Name].Players = espBox
end

local function createUsersESP()
    -- Look for NPCs/Bots in workspace
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj:FindFirstChild("HumanoidRootPart") and obj:FindFirstChild("Humanoid") then
            -- Check if it's not a player character
            local isPlayer = false
            for _, player in pairs(Players:GetPlayers()) do
                if player.Character == obj then
                    isPlayer = true
                    break
                end
            end
            
            if not isPlayer then
                local espBox = Instance.new("BoxHandleAdornment")
                espBox.Name = "UserESP_" .. obj.Name
                espBox.Size = Vector3.new(4, 6, 1)
                espBox.Color3 = Color3.fromRGB(255, 0, 0) -- Red
                espBox.Transparency = 0.7
                espBox.AlwaysOnTop = true
                espBox.ZIndex = 1
                espBox.Adornee = obj.HumanoidRootPart
                espBox.Parent = obj.HumanoidRootPart
                
                -- Store connection for cleanup
                if not ESPConnections[obj.Name] then
                    ESPConnections[obj.Name] = {}
                end
                ESPConnections[obj.Name].Users = espBox
            end
        end
    end
end

local function removeAllESP(espType)
    for name, connections in pairs(ESPConnections) do
        if connections[espType] then
            connections[espType]:Destroy()
            connections[espType] = nil
        end
    end
end

-- Players ESP Toggle
visualTab:AddToggle({
    Name = "Players ESP (Blue)",
    Default = false,
    Callback = function(state)
        PlayersESPEnabled = state
        if state then
            -- Enable Players ESP
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer then
                    createPlayerESP(player)
                end
            end
            OrionLib:MakeNotification({
                Name = "Players ESP",
                Content = "Players ESP enabled (Blue)",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        else
            -- Disable Players ESP
            removeAllESP("Players")
            OrionLib:MakeNotification({
                Name = "Players ESP",
                Content = "Players ESP disabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Users ESP Toggle (NPCs/Bots)
visualTab:AddToggle({
    Name = "Users ESP (Red)",
    Default = false,
    Callback = function(state)
        UsersESPEnabled = state
        if state then
            -- Enable Users ESP for NPCs/Bots
            createUsersESP()
            OrionLib:MakeNotification({
                Name = "Users ESP",
                Content = "Users ESP enabled (Red)",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        else
            -- Disable Users ESP
            removeAllESP("Users")
            OrionLib:MakeNotification({
                Name = "Users ESP",
                Content = "Users ESP disabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- === MISC TAB ===
local miscTab = Window:MakeTab({
    Name = "Misc",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- WalkSpeed TextBox
miscTab:AddTextbox({
    Name = "WalkSpeed",
    Default = "16",
    TextDisappear = true,
    Callback = function(value)
        local num = tonumber(value)
        if num then
            WalkSpeedValue = num
            SpeedEnabled = true
            OrionLib:MakeNotification({
                Name = "WalkSpeed",
                Content = "WalkSpeed set to " .. num,
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- JumpPower TextBox
miscTab:AddTextbox({
    Name = "JumpPower",
    Default = "50",
    TextDisappear = true,
    Callback = function(value)
        local num = tonumber(value)
        if num then
            JumpPowerValue = num
            SpeedEnabled = true
            OrionLib:MakeNotification({
                Name = "JumpPower",
                Content = "JumpPower set to " .. num,
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Rejoin Button
miscTab:AddButton({
    Name = "Rejoin",
    Callback = function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
        OrionLib:MakeNotification({
            Name = "Rejoin",
            Content = "Attempting to rejoin the server...",
            Image = "rbxassetid://4483345998",
            Time = 3
        })
    end
})

-- Server Hop Button
miscTab:AddButton({
    Name = "Server Hop",
    Callback = function()
        local Servers = {}
        local Success, Response = pcall(function()
            return game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100")
        end)
        if Success then
            local Data = HttpService:JSONDecode(Response)
            for _, server in pairs(Data.data) do
                if server.playing < server.maxPlayers and server.id ~= game.JobId then
                    table.insert(Servers, server.id)
                end
            end
            if #Servers > 0 then
                TeleportService:TeleportToPlaceInstance(game.PlaceId, Servers[math.random(1, #Servers)], LocalPlayer)
                OrionLib:MakeNotification({
                    Name = "Server Hop",
                    Content = "Hopping to a new server...",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            else
                OrionLib:MakeNotification({
                    Name = "Server Hop Failed",
                    Content = "No available servers found.",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end
        else
            OrionLib:MakeNotification({
                Name = "Server Hop Failed",
                Content = "Failed to fetch server list.",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Spin Bot Toggle
miscTab:AddToggle({
    Name = "Spin Bot",
    Default = false,
    Callback = function(state)
        SpinBotEnabled = state
        if state then
            OrionLib:MakeNotification({
                Name = "Spin Bot",
                Content = "Spin Bot enabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        else
            OrionLib:MakeNotification({
                Name = "Spin Bot",
                Content = "Spin Bot disabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- === RUN SERVICE ===
RunService.RenderStepped:Connect(function()
    -- Apply WalkSpeed/JumpPower
    if SpeedEnabled and Humanoid then
        Humanoid.WalkSpeed = WalkSpeedValue
        Humanoid.JumpPower = JumpPowerValue
    end
    
    -- Function to find any available Schlap tool
    local function findSchlapTool()
        for _, toolName in pairs(SchlapTools) do
            local tool = LocalPlayer.Backpack:FindFirstChild(toolName) or Character:FindFirstChild(toolName)
            if tool then
                return tool, toolName
            end
        end
        return nil, nil
    end
    
    -- Function to show tool warning with specific tool list
    local function showToolWarning()
        local currentTime = tick()
        if currentTime - LastToolWarningTime >= ToolWarningCooldown then
            LastToolWarningTime = currentTime
            local toolList = table.concat(SchlapTools, ", ")
            OrionLib:MakeNotification({
                Name = "⚠️ No Schlap Tool Found",
                Content = "Please equip one of these tools: " .. toolList,
                Image = "rbxassetid://4483345998",
                Time = 6
            })
        end
    end
    
    -- Auto Slap logic (normal)
    if AutoSlapEnabled and not AutoSlapAuraEnabled then
        local currentTime = tick()
        if currentTime - LastSlapTime >= SlapSpeed then
            LastSlapTime = currentTime
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and Character and Character:FindFirstChild("HumanoidRootPart") then
                    local distance = (Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                    if distance <= 10 then
                        local tool, toolName = findSchlapTool()
                        if tool and Humanoid and Humanoid.Health > 0 and Humanoid:GetState() ~= Enum.HumanoidStateType.Dead then
                            if tool.Parent ~= Character then
                                Humanoid:EquipTool(tool)
                                task.wait(0.3)
                            end
                            if tool:IsA("Tool") and tool.Parent == Character then
                                local success, err = pcall(function()
                                    tool:Activate()
                                end)
                                if not success then
                                    OrionLib:MakeNotification({
                                        Name = "Tool Activation Failed",
                                        Content = "Error with " .. toolName .. ": " .. tostring(err),
                                        Image = "rbxassetid://4483345998",
                                        Time = 3
                                    })
                                end
                            end
                        else
                            showToolWarning()
                        end
                        break
                    end
                end
            end
        end
    end
    
    -- Auto Slap Aura logic (teleports to players)
    if AutoSlapAuraEnabled and Character and Character:FindFirstChild("HumanoidRootPart") then
        local currentTime = tick()
        if currentTime - LastAuraTime >= AuraSwitchDelay then
            LastAuraTime = currentTime
            
            local players = {}
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    table.insert(players, player)
                end
            end
            
            if #players > 0 then
                -- Cycle through players
                if AuraTargetIndex > #players then
                    AuraTargetIndex = 1
                end
                
                local targetPlayer = players[AuraTargetIndex]
                if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    -- Teleport to target player
                    local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
                    Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition + Vector3.new(2, 0, 0))
                    
                    -- Try to slap with any available tool
                    local tool, toolName = findSchlapTool()
                    if tool and Humanoid and Humanoid.Health > 0 then
                        if tool.Parent ~= Character then
                            Humanoid:EquipTool(tool)
                            task.wait(0.1)
                        end
                        if tool:IsA("Tool") and tool.Parent == Character then
                            local success, err = pcall(function()
                                tool:Activate()
                            end)
                            if success then
                                OrionLib:MakeNotification({
                                    Name = "Aura Target",
                                    Content = "Slapping " .. targetPlayer.Name .. " with " .. toolName,
                                    Image = "rbxassetid://4483345998",
                                    Time = 1
                                })
                            end
                        end
                    else
                        showToolWarning()
                    end
                    
                    -- Move to next target
                    AuraTargetIndex = AuraTargetIndex + 1
                end
            end
        end
    end
    
    -- Spin Bot logic
    if SpinBotEnabled and Character:FindFirstChild("HumanoidRootPart") then
        Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(15), 0)
    end
    
    -- AntiRagdoll logic
    if AntiRagdollEnabled and Humanoid then
        if Humanoid:GetState() == Enum.HumanoidStateType.Physics then
            Humanoid:ChangeState(Enum.HumanoidStateType.Running)
        end
        Humanoid.PlatformStand = false
    end
    
    -- Update ESP for new players
    if PlayersESPEnabled then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                if not ESPConnections[player.Name] or not ESPConnections[player.Name].Players then
                    createPlayerESP(player)
                end
            end
        end
    end
    
    -- Update ESP for users/NPCs
    if UsersESPEnabled then
        createUsersESP()
    end
end)

-- Handle new players joining
Players.PlayerAdded:Connect(function(player)
    if PlayersESPEnabled then
        player.CharacterAdded:Connect(function()
            task.wait(1) -- Wait for character to fully load
            createPlayerESP(player)
        end)
    end
end)

-- Handle players leaving
Players.PlayerRemoving:Connect(function(player)
    if ESPConnections[player.Name] then
        if ESPConnections[player.Name].Players then
            ESPConnections[player.Name].Players:Destroy()
        end
        ESPConnections[player.Name] = nil
    end
end)

-- Handle Character Respawn
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    Humanoid = newCharacter:WaitForChild("Humanoid")
    -- Reapply WalkSpeed/JumpPower if enabled
    if SpeedEnabled then
        Humanoid.WalkSpeed = WalkSpeedValue
        Humanoid.JumpPower = JumpPowerValue
    end
    -- Reapply AntiRagdoll if enabled
    if AntiRagdollEnabled then
        if Humanoid:GetState() == Enum.HumanoidStateType.Physics then
            Humanoid:ChangeState(Enum.HumanoidStateType.Running)
        end
        Humanoid.PlatformStand = false
    end
    -- Reapply Invisible Mode if enabled
    if InvisibleModeEnabled then
        task.wait(1) -- Wait for character to fully spawn
        enableInvisibleMode()
    end
end)

-- Initialize OrionLib
OrionLib:Init()
