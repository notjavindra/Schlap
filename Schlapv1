-- Load OrionLib
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/ionlyusegithubformcmods/1-Line-Scripts/main/Mobile%20Friendly%20Orion')))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local Workspace = game:GetService("Workspace")

-- Variables
local WalkSpeedValue, JumpPowerValue = 16, 50
local SpeedEnabled = false
local AutoSlapEnabled = false
local SpinBotEnabled = false
local AntiVoidEnabled = false
local AntiVoidPart = nil

-- Function to find a safe teleport position (e.g., player's base or spawn)
local function findSafeTeleportPosition()
    -- Attempt to find player's base (similar to the second script's findBaseTextLabel)
    local playerName = LocalPlayer.Name
    local targetText = playerName .. "'s Base"
    
    local function searchForTextLabel(parent)
        for _, descendant in pairs(parent:GetDescendants()) do
            if descendant:IsA("TextLabel") and descendant.Text == targetText then
                return descendant
            end
        end
        return nil
    end
    
    local textLabel = searchForTextLabel(Workspace)
    if textLabel then
        local basePart = textLabel.Parent.Parent.Parent
        if basePart:IsA("BasePart") then
            return basePart.Position + Vector3.new(0, 5, 0)
        elseif basePart:IsA("Model") then
            local primaryPart = basePart.PrimaryPart or basePart:GetPivot()
            return primaryPart.Position + Vector3.new(0, 5, 0)
        end
    end
    
    -- Fallback to a default safe position or spawn point
    local spawnPoints = Workspace:FindFirstChild("SpawnLocation") or Workspace:FindFirstChildWhichIsA("SpawnLocation")
    if spawnPoints then
        return spawnPoints.Position + Vector3.new(0, 5, 0)
    end
    
    -- Default fallback position
    return Vector3.new(0, 100, 0) -- Adjust based on game map if needed
end

-- Create Window with OrionLib
local Window = OrionLib:MakeWindow({
    Name = "Schlap | Merqury Hub",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "SchlapConfig",
    IntroText = "Schlap"
})

-- === MAIN TAB ===
local mainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Auto Slap (Modified to use only "Basic" tool)
mainTab:AddToggle({
    Name = "Auto Slap",
    Default = false,
    Callback = function(state)
        AutoSlapEnabled = state
        if state then
            OrionLib:MakeNotification({
                Name = "Auto Slap",
                Content = "Auto Slap enabled (using Basic tool)",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        else
            OrionLib:MakeNotification({
                Name = "Auto Slap",
                Content = "Auto Slap disabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- AntiVoid Toggle (Improved)
mainTab:AddToggle({
    Name = "Antivoid",
    Default = false,
    Callback = function(state)
        AntiVoidEnabled = state
        if state then
            -- Create AntiVoid Part
            if not AntiVoidPart then
                AntiVoidPart = Instance.new("Part")
                AntiVoidPart.Size = Vector3.new(5000, 1, 5000) -- Increased size to cover larger area
                AntiVoidPart.Position = Vector3.new(0, -50, 0) -- Lowered to ensure it catches falls (adjust based on game)
                AntiVoidPart.Anchored = true
                AntiVoidPart.Transparency = 1
                AntiVoidPart.CanCollide = true
                AntiVoidPart.Parent = Workspace
                -- Touch event to teleport player
                AntiVoidPart.Touched:Connect(function(hit)
                    local player = Players:GetPlayerFromCharacter(hit.Parent)
                    if player and player == LocalPlayer then
                        local char = player.Character
                        if char and char:FindFirstChild("HumanoidRootPart") then
                            local safePos = findSafeTeleportPosition()
                            char.HumanoidRootPart.CFrame = CFrame.new(safePos)
                            OrionLib:MakeNotification({
                                Name = "AntiVoid",
                                Content = "Teleported to safe position!",
                                Image = "rbxassetid://4483345998",
                                Time = 3
                            })
                        end
                    end
                end)
                OrionLib:MakeNotification({
                    Name = "AntiVoid",
                    Content = "AntiVoid enabled",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end
        else
            -- Remove AntiVoid Part
            if AntiVoidPart then
                AntiVoidPart:Destroy()
                AntiVoidPart = nil
                OrionLib:MakeNotification({
                    Name = "AntiVoid",
                    Content = "AntiVoid disabled",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end
        end
    end
})

-- === MISC TAB ===
local miscTab = Window:MakeTab({
    Name = "Misc",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- WalkSpeed TextBox
miscTab:AddTextbox({
    Name = "WalkSpeed",
    Default = "16",
    TextDisappear = true,
    Callback = function(value)
        local num = tonumber(value)
        if num then
            WalkSpeedValue = num
            SpeedEnabled = true
            OrionLib:MakeNotification({
                Name = "WalkSpeed",
                Content = "WalkSpeed set to " .. num,
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- JumpPower TextBox
miscTab:AddTextbox({
    Name = "JumpPower",
    Default = "50",
    TextDisappear = true,
    Callback = function(value)
        local num = tonumber(value)
        if num then
            JumpPowerValue = num
            SpeedEnabled = true
            OrionLib:MakeNotification({
                Name = "JumpPower",
                Content = "JumpPower set to " .. num,
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Rejoin Button
miscTab:AddButton({
    Name = "Rejoin",
    Callback = function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
        OrionLib:MakeNotification({
            Name = "Rejoin",
            Content = "Attempting to rejoin the server...",
            Image = "rbxassetid://4483345998",
            Time = 3
        })
    end
})

-- Server Hop Button
miscTab:AddButton({
    Name = "Server Hop",
    Callback = function()
        local Servers = {}
        local Success, Response = pcall(function()
            return game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100")
        end)
        if Success then
            local Data = HttpService:JSONDecode(Response)
            for _, server in pairs(Data.data) do
                if server.playing < server.maxPlayers and server.id ~= game.JobId then
                    table.insert(Servers, server.id)
                end
            end
            if #Servers > 0 then
                TeleportService:TeleportToPlaceInstance(game.PlaceId, Servers[math.random(1, #Servers)], LocalPlayer)
                OrionLib:MakeNotification({
                    Name = "Server Hop",
                    Content = "Hopping to a new server...",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            else
                OrionLib:MakeNotification({
                    Name = "Server Hop Failed",
                    Content = "No available servers found.",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end
        else
            OrionLib:MakeNotification({
                Name = "Server Hop Failed",
                Content = "Failed to fetch server list.",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Spin Bot Toggle
miscTab:AddToggle({
    Name = "Spin Bot",
    Default = false,
    Callback = function(state)
        SpinBotEnabled = state
        if state then
            OrionLib:MakeNotification({
                Name = "Spin Bot",
                Content = "Spin Bot enabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        else
            OrionLib:MakeNotification({
                Name = "Spin Bot",
                Content = "Spin Bot disabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- === RUN SERVICE ===
RunService.RenderStepped:Connect(function()
    -- Apply WalkSpeed/JumpPower
    if SpeedEnabled and Humanoid then
        Humanoid.WalkSpeed = WalkSpeedValue
        Humanoid.JumpPower = JumpPowerValue
    end
    -- Auto Slap logic (Modified to use only "Basic" tool)
    if AutoSlapEnabled then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local distance = (Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                if distance <= 10 then
                    local tool = LocalPlayer.Backpack:FindFirstChild("Basic") or Character:FindFirstChild("Basic")
                    if tool then
                        if tool.Parent ~= Character then
                            Humanoid:EquipTool(tool)
                            task.wait(0.1) -- Wait for tool to equip
                        end
                        if tool:IsA("Tool") and tool.Parent == Character then
                            local success, err = pcall(function()
                                tool:Activate()
                            end)
                            if not success then
                                OrionLib:MakeNotification({
                                    Name = "Tool Activation Failed",
                                    Content = "Error: " .. tostring(err),
                                    Image = "rbxassetid://4483345998",
                                    Time = 3
                                })
                            end
                        end
                    else
                        OrionLib:MakeNotification({
                            Name = "Tool Not Found",
                            Content = "Basic tool not found in Backpack or Character.",
                            Image = "rbxassetid://4483345998",
                            Time = 3
                        })
                    end
                    break -- Exit loop after attempting to slap one target
                end
            end
        end
    end
    -- Spin Bot logic
    if SpinBotEnabled and Character:FindFirstChild("HumanoidRootPart") then
        Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(15), 0)
    end
end)

-- Handle Character Respawn
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    Humanoid = newCharacter:WaitForChild("Humanoid")
    -- Reapply WalkSpeed/JumpPower if enabled
    if SpeedEnabled then
        Humanoid.WalkSpeed = WalkSpeedValue
        Humanoid.JumpPower = JumpPowerValue
    end
end)

-- Initialize OrionLib
OrionLib:Init()
