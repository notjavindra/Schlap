-- Load OrionLib
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/ionlyusegithubformcmods/1-Line-Scripts/main/Mobile%20Friendly%20Orion')))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local Workspace = game:GetService("Workspace")

-- Variables
local WalkSpeedValue, JumpPowerValue = 16, 50
local SpeedEnabled = false
local AutoSlapEnabled = false
local SpinBotEnabled = false
local AntiVoidEnabled = false
local AntiVoidPart = nil
local SlapSpeed = 0.3 -- Increased delay to prevent glitching
local LastSlapTime = 0 -- Debounce for slap activation
local LastTeleportTime = 0 -- Debounce for AntiVoid teleport
local TeleportDebounce = 1 -- Seconds between teleports

-- Create Window with OrionLib
local Window = OrionLib:MakeWindow({
    Name = "Schlap | Merqury Hub",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "SchlapConfig",
    IntroText = "Schlap"
})

-- === MAIN TAB ===
local mainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Auto Slap (Refined to prevent glitching)
mainTab:AddToggle({
    Name = "Auto Slap",
    Default = false,
    Callback = function(state)
        AutoSlapEnabled = state
        if state then
            OrionLib:MakeNotification({
                Name = "Auto Slap",
                Content = "Auto Slap enabled (using Basic tool)",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        else
            OrionLib:MakeNotification({
                Name = "Auto Slap",
                Content = "Auto Slap disabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- AntiVoid Toggle (Updated with fixed teleport CFrame and lower part)
mainTab:AddToggle({
    Name = "Antivoid",
    Default = false,
    Callback = function(state)
        AntiVoidEnabled = state
        if state then
            -- Create AntiVoid Part
            if not AntiVoidPart then
                AntiVoidPart = Instance.new("Part")
                AntiVoidPart.Size = Vector3.new(5000, 1, 5000) -- Large area to cover void
                AntiVoidPart.Position = Vector3.new(0, -200, 0) -- Lowered further into void
                AntiVoidPart.Anchored = true
                AntiVoidPart.Transparency = 1
                AntiVoidPart.CanCollide = true
                AntiVoidPart.Parent = Workspace
                -- Touch event to teleport player
                AntiVoidPart.Touched:Connect(function(hit)
                    local player = Players:GetPlayerFromCharacter(hit.Parent)
                    if player and player == LocalPlayer then
                        local char = player.Character
                        if char and char:FindFirstChild("HumanoidRootPart") then
                            local currentTime = tick()
                            if currentTime - LastTeleportTime >= TeleportDebounce then
                                LastTeleportTime = currentTime
                                char.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-21.19, -49.709, 331.93), Vector3.new(0, 0, 0))
                                OrionLib:MakeNotification({
                                    Name = "AntiVoid",
                                    Content = "Teleported to safe position!",
                                    Image = "rbxassetid://4483345998",
                                    Time = 3
                                })
                            end
                        end
                    end
                end)
                OrionLib:MakeNotification({
                    Name = "AntiVoid",
                    Content = "AntiVoid enabled",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end
        else
            -- Remove AntiVoid Part
            if AntiVoidPart then
                AntiVoidPart:Destroy()
                AntiVoidPart = nil
                OrionLib:MakeNotification({
                    Name = "AntiVoid",
                    Content = "AntiVoid disabled",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end
        end
    end
})

-- === MISC TAB ===
local miscTab = Window:MakeTab({
    Name = "Misc",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- WalkSpeed TextBox
miscTab:AddTextbox({
    Name = "WalkSpeed",
    Default = "16",
    TextDisappear = true,
    Callback = function(value)
        local num = tonumber(value)
        if num then
            WalkSpeedValue = num
            SpeedEnabled = true
            OrionLib:MakeNotification({
                Name = "WalkSpeed",
                Content = "WalkSpeed set to " .. num,
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- JumpPower TextBox
miscTab:AddTextbox({
    Name = "JumpPower",
    Default = "50",
    TextDisappear = true,
    Callback = function(value)
        local num = tonumber(value)
        if num then
            JumpPowerValue = num
            SpeedEnabled = true
            OrionLib:MakeNotification({
                Name = "JumpPower",
                Content = "JumpPower set to " .. num,
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Rejoin Button
miscTab:AddButton({
    Name = "Rejoin",
    Callback = function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
        OrionLib:MakeNotification({
            Name = "Rejoin",
            Content = "Attempting to rejoin the server...",
            Image = "rbxassetid://4483345998",
            Time = 3
        })
    end
})

-- Server Hop Button
miscTab:AddButton({
    Name = "Server Hop",
    Callback = function()
        local Servers = {}
        local Success, Response = pcall(function()
            return game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100")
        end)
        if Success then
            local Data = HttpService:JSONDecode(Response)
            for _, server in pairs(Data.data) do
                if server.playing < server.maxPlayers and server.id ~= game.JobId then
                    table.insert(Servers, server.id)
                end
            end
            if #Servers > 0 then
                TeleportService:TeleportToPlaceInstance(game.PlaceId, Servers[math.random(1, #Servers)], LocalPlayer)
                OrionLib:MakeNotification({
                    Name = "Server Hop",
                    Content = "Hopping to a new server...",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            else
                OrionLib:MakeNotification({
                    Name = "Server Hop Failed",
                    Content = "No available servers found.",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end
        else
            OrionLib:MakeNotification({
                Name = "Server Hop Failed",
                Content = "Failed to fetch server list.",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Spin Bot Toggle
miscTab:AddToggle({
    Name = "Spin Bot",
    Default = false,
    Callback = function(state)
        SpinBotEnabled = state
        if state then
            OrionLib:MakeNotification({
                Name = "Spin Bot",
                Content = "Spin Bot enabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        else
            OrionLib:MakeNotification({
                Name = "Spin Bot",
                Content = "Spin Bot disabled",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- === RUN SERVICE ===
RunService.RenderStepped:Connect(function()
    -- Apply WalkSpeed/JumpPower
    if SpeedEnabled and Humanoid then
        Humanoid.WalkSpeed = WalkSpeedValue
        Humanoid.JumpPower = JumpPowerValue
    end
    -- Auto Slap logic (Refined to prevent glitching)
    if AutoSlapEnabled then
        local currentTime = tick()
        if currentTime - LastSlapTime >= SlapSpeed then
            LastSlapTime = currentTime
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and Character and Character:FindFirstChild("HumanoidRootPart") then
                    local distance = (Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                    if distance <= 10 then
                        local tool = LocalPlayer.Backpack:FindFirstChild("Basic") or Character:FindFirstChild("Basic")
                        if tool and Humanoid and Humanoid.Health > 0 and Humanoid:GetState() ~= Enum.HumanoidStateType.Dead then
                            if tool.Parent ~= Character then
                                Humanoid:EquipTool(tool)
                                task.wait(0.3) -- Increased delay for reliable equipping
                            end
                            if tool:IsA("Tool") and tool.Parent == Character then
                                local success, err = pcall(function()
                                    tool:Activate()
                                end)
                                if not success then
                                    OrionLib:MakeNotification({
                                        Name = "Tool Activation Failed",
                                        Content = "Error: " .. tostring(err),
                                        Image = "rbxassetid://4483345998",
                                        Time = 3
                                    })
                                end
                            end
                        else
                            OrionLib:MakeNotification({
                                Name = "Tool Not Found",
                                Content = "Basic tool not found or player not ready.",
                                Image = "rbxassetid://4483345998",
                                Time = 3
                            })
                        end
                        break -- Exit loop after attempting to slap one target
                    end
                end
            end
        end
    end
    -- Spin Bot logic
    if SpinBotEnabled and Character:FindFirstChild("HumanoidRootPart") then
        Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(15), 0)
    end
end)

-- Handle Character Respawn
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    Humanoid = newCharacter:WaitForChild("Humanoid")
    -- Reapply WalkSpeed/JumpPower if enabled
    if SpeedEnabled then
        Humanoid.WalkSpeed = WalkSpeedValue
        Humanoid.JumpPower = JumpPowerValue
    end
end)

-- Initialize OrionLib
OrionLib:Init()
