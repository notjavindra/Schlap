-- Load WindUI
local Version = "1.6.31"
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/download/" .. Version .. "/main.lua"))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local Workspace = game:GetService("Workspace")

-- Variables
local WalkSpeedValue, JumpPowerValue = 16, 50
local SpeedEnabled = false
local AutoSlapEnabled = false
local SpinBotEnabled = false
local AntiVoidEnabled = false
local AntiRagdollEnabled = false
local AntiVoidPart = nil
local SlapSpeed = 0.3 -- Delay between slap attempts
local LastSlapTime = 0 -- Debounce for slap activation
local LastTeleportTime = 0 -- Debounce for AntiVoid teleport
local TeleportDebounce = 1 -- Seconds between teleports

-- Create Window with WindUI
local Window = WindUI:New("Schlap | Merqury Hub")

-- === MAIN TAB ===
local mainTab = Window:Tab("Main")

-- Auto Slap
mainTab:Toggle("Auto Slap", false, function(state)
    AutoSlapEnabled = state
    if state then
        WindUI:Notify("Auto Slap", "Auto Slap enabled (using Basic tool)", 3)
    else
        WindUI:Notify("Auto Slap", "Auto Slap disabled", 3)
    end
end)

-- AntiVoid Toggle
mainTab:Toggle("Antivoid", false, function(state)
    AntiVoidEnabled = state
    if state then
        -- Create AntiVoid Part
        if not AntiVoidPart then
            AntiVoidPart = Instance.new("Part")
            AntiVoidPart.Size = Vector3.new(5000, 1, 5000)
            AntiVoidPart.Position = Vector3.new(0, -200, 0)
            AntiVoidPart.Anchored = true
            AntiVoidPart.Transparency = 1
            AntiVoidPart.CanCollide = true
            AntiVoidPart.Parent = Workspace
            -- Touch event to teleport player
            AntiVoidPart.Touched:Connect(function(hit)
                local player = Players:GetPlayerFromCharacter(hit.Parent)
                if player and player == LocalPlayer then
                    local char = player.Character
                    if char and char:FindFirstChild("HumanoidRootPart") then
                        local currentTime = tick()
                        if currentTime - LastTeleportTime >= TeleportDebounce then
                            LastTeleportTime = currentTime
                            char.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-21.19, -49.709, 331.93), Vector3.new(0, 0, 0))
                            WindUI:Notify("AntiVoid", "Teleported to safe position!", 3)
                        end
                    end
                end
            end)
            WindUI:Notify("AntiVoid", "AntiVoid enabled", 3)
        end
    else
        -- Remove AntiVoid Part
        if AntiVoidPart then
            AntiVoidPart:Destroy()
            AntiVoidPart = nil
            WindUI:Notify("AntiVoid", "AntiVoid disabled", 3)
        end
    end
end)

-- AntiRagdoll Toggle
mainTab:Toggle("AntiRagdoll", false, function(state)
    AntiRagdollEnabled = state
    if state then
        WindUI:Notify("AntiRagdoll", "AntiRagdoll enabled", 3)
    else
        WindUI:Notify("AntiRagdoll", "AntiRagdoll disabled", 3)
    end
end)

-- === MISC TAB ===
local miscTab = Window:Tab("Misc")

-- WalkSpeed TextBox
miscTab:Textbox("WalkSpeed", "16", function(value)
    local num = tonumber(value)
    if num then
        WalkSpeedValue = num
        SpeedEnabled = true
        WindUI:Notify("WalkSpeed", "WalkSpeed set to " .. num, 3)
    end
end)

-- JumpPower TextBox
miscTab:Textbox("JumpPower", "50", function(value)
    local num = tonumber(value)
    if num then
        JumpPowerValue = num
        SpeedEnabled = true
        WindUI:Notify("JumpPower", "JumpPower set to " .. num, 3)
    end
end)

-- Rejoin Button
miscTab:Button("Rejoin", function()
    TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
    WindUI:Notify("Rejoin", "Attempting to rejoin the server...", 3)
end)

-- Server Hop Button
miscTab:Button("Server Hop", function()
    local Servers = {}
    local Success, Response = pcall(function()
        return game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100")
    end)
    if Success then
        local Data = HttpService:JSONDecode(Response)
        for _, server in pairs(Data.data) do
            if server.playing < server.maxPlayers and server.id ~= game.JobId then
                table.insert(Servers, server.id)
            end
        end
        if #Servers > 0 then
            TeleportService:TeleportToPlaceInstance(game.PlaceId, Servers[math.random(1, #Servers)], LocalPlayer)
            WindUI:Notify("Server Hop", "Hopping to a new server...", 3)
        else
            WindUI:Notify("Server Hop Failed", "No available servers found.", 3)
        end
    else
        WindUI:Notify("Server Hop Failed", "Failed to fetch server list.", 3)
    end
end)

-- Spin Bot Toggle
miscTab:Toggle("Spin Bot", false, function(state)
    SpinBotEnabled = state
    if state then
        WindUI:Notify("Spin Bot", "Spin Bot enabled", 3)
    else
        WindUI:Notify("Spin Bot", "Spin Bot disabled", 3)
    end
end)

-- === RUN SERVICE ===
RunService.RenderStepped:Connect(function()
    -- Apply WalkSpeed/JumpPower
    if SpeedEnabled and Humanoid then
        Humanoid.WalkSpeed = WalkSpeedValue
        Humanoid.JumpPower = JumpPowerValue
    end
    -- Auto Slap logic
    if AutoSlapEnabled then
        local currentTime = tick()
        if currentTime - LastSlapTime >= SlapSpeed then
            LastSlapTime = currentTime
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and Character and Character:FindFirstChild("HumanoidRootPart") then
                    local distance = (Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                    if distance <= 10 then
                        local tool = LocalPlayer.Backpack:FindFirstChild("Basic") or Character:FindFirstChild("Basic")
                        if tool and Humanoid and Humanoid.Health > 0 and Humanoid:GetState() ~= Enum.HumanoidStateType.Dead then
                            if tool.Parent ~= Character then
                                Humanoid:EquipTool(tool)
                                task.wait(0.3)
                            end
                            if tool:IsA("Tool") and tool.Parent == Character then
                                local success, err = pcall(function()
                                    tool:Activate()
                                end)
                                if not success then
                                    WindUI:Notify("Tool Activation Failed", "Error: " .. tostring(err), 3)
                                end
                            end
                        else
                            WindUI:Notify("Tool Not Found", "Basic tool not found or player not ready.", 3)
                        end
                        break
                    end
                end
            end
        end
    end
    -- Spin Bot logic
    if SpinBotEnabled and Character:FindFirstChild("HumanoidRootPart") then
        Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(15), 0)
    end
    -- AntiRagdoll logic
    if AntiRagdollEnabled and Humanoid then
        if Humanoid:GetState() == Enum.HumanoidStateType.Physics then
            Humanoid:ChangeState(Enum.HumanoidStateType.Running)
        end
        Humanoid.PlatformStand = false
    end
end)

-- Handle Character Respawn
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    Humanoid = newCharacter:WaitForChild("Humanoid")
    -- Reapply WalkSpeed/JumpPower if enabled
    if SpeedEnabled then
        Humanoid.WalkSpeed = WalkSpeedValue
        Humanoid.JumpPower = JumpPowerValue
    end
    -- Reapply AntiRagdoll if enabled
    if AntiRagdollEnabled then
        if Humanoid:GetState() == Enum.HumanoidStateType.Physics then
            Humanoid:ChangeState(Enum.HumanoidStateType.Running)
        end
        Humanoid.PlatformStand = false
    end
end)
